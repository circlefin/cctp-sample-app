/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers'
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from '@ethersproject/abi'
import type { Listener, Provider } from '@ethersproject/providers'
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from './common'

export interface TokenMessengerWithMetadataInterface extends utils.Interface {
  functions: {
    'depositForBurn(uint64,bytes32,bytes32,uint256,bytes32,address,bytes)': FunctionFragment
    'depositForBurnWithCaller(uint64,bytes32,bytes32,uint256,bytes32,address,bytes32,bytes)': FunctionFragment
    'domainNumber()': FunctionFragment
    'domainRecipient()': FunctionFragment
    'messageTransmitter()': FunctionFragment
    'rawDepositForBurn(uint256,bytes32,address,bytes)': FunctionFragment
    'rawDepositForBurnWithCaller(uint256,bytes32,address,bytes32,bytes)': FunctionFragment
    'tokenMessenger()': FunctionFragment
  }

  getFunction(
    nameOrSignatureOrTopic:
      | 'depositForBurn'
      | 'depositForBurnWithCaller'
      | 'domainNumber'
      | 'domainRecipient'
      | 'messageTransmitter'
      | 'rawDepositForBurn'
      | 'rawDepositForBurnWithCaller'
      | 'tokenMessenger'
  ): FunctionFragment

  encodeFunctionData(
    functionFragment: 'depositForBurn',
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string
  encodeFunctionData(
    functionFragment: 'depositForBurnWithCaller',
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string
  encodeFunctionData(
    functionFragment: 'domainNumber',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'domainRecipient',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'messageTransmitter',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'rawDepositForBurn',
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string
  encodeFunctionData(
    functionFragment: 'rawDepositForBurnWithCaller',
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string
  encodeFunctionData(
    functionFragment: 'tokenMessenger',
    values?: undefined
  ): string

  decodeFunctionResult(
    functionFragment: 'depositForBurn',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'depositForBurnWithCaller',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'domainNumber',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'domainRecipient',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'messageTransmitter',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'rawDepositForBurn',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'rawDepositForBurnWithCaller',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'tokenMessenger',
    data: BytesLike
  ): Result

  events: {
    'DepositForBurnMetadata(uint64,uint64,bytes)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'DepositForBurnMetadata'): EventFragment
}

export interface DepositForBurnMetadataEventObject {
  nonce: BigNumber
  metadataNonce: BigNumber
  metadata: string
}
export type DepositForBurnMetadataEvent = TypedEvent<
  [BigNumber, BigNumber, string],
  DepositForBurnMetadataEventObject
>

export type DepositForBurnMetadataEventFilter =
  TypedEventFilter<DepositForBurnMetadataEvent>

export interface TokenMessengerWithMetadata extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  interface: TokenMessengerWithMetadataInterface

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>
  listeners(eventName?: string): Array<Listener>
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this
  removeAllListeners(eventName?: string): this
  off: OnEvent<this>
  on: OnEvent<this>
  once: OnEvent<this>
  removeListener: OnEvent<this>

  functions: {
    depositForBurn(
      channel: PromiseOrValue<BigNumberish>,
      destinationBech32Prefix: PromiseOrValue<BytesLike>,
      destinationRecipient: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      mintRecipient: PromiseOrValue<BytesLike>,
      burnToken: PromiseOrValue<string>,
      memo: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    depositForBurnWithCaller(
      channel: PromiseOrValue<BigNumberish>,
      destinationBech32Prefix: PromiseOrValue<BytesLike>,
      destinationRecipient: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      mintRecipient: PromiseOrValue<BytesLike>,
      burnToken: PromiseOrValue<string>,
      destinationCaller: PromiseOrValue<BytesLike>,
      memo: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    domainNumber(overrides?: CallOverrides): Promise<[number]>

    domainRecipient(overrides?: CallOverrides): Promise<[string]>

    messageTransmitter(overrides?: CallOverrides): Promise<[string]>

    rawDepositForBurn(
      amount: PromiseOrValue<BigNumberish>,
      mintRecipient: PromiseOrValue<BytesLike>,
      burnToken: PromiseOrValue<string>,
      metadata: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    rawDepositForBurnWithCaller(
      amount: PromiseOrValue<BigNumberish>,
      mintRecipient: PromiseOrValue<BytesLike>,
      burnToken: PromiseOrValue<string>,
      destinationCaller: PromiseOrValue<BytesLike>,
      metadata: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    tokenMessenger(overrides?: CallOverrides): Promise<[string]>
  }

  depositForBurn(
    channel: PromiseOrValue<BigNumberish>,
    destinationBech32Prefix: PromiseOrValue<BytesLike>,
    destinationRecipient: PromiseOrValue<BytesLike>,
    amount: PromiseOrValue<BigNumberish>,
    mintRecipient: PromiseOrValue<BytesLike>,
    burnToken: PromiseOrValue<string>,
    memo: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  depositForBurnWithCaller(
    channel: PromiseOrValue<BigNumberish>,
    destinationBech32Prefix: PromiseOrValue<BytesLike>,
    destinationRecipient: PromiseOrValue<BytesLike>,
    amount: PromiseOrValue<BigNumberish>,
    mintRecipient: PromiseOrValue<BytesLike>,
    burnToken: PromiseOrValue<string>,
    destinationCaller: PromiseOrValue<BytesLike>,
    memo: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  domainNumber(overrides?: CallOverrides): Promise<number>

  domainRecipient(overrides?: CallOverrides): Promise<string>

  messageTransmitter(overrides?: CallOverrides): Promise<string>

  rawDepositForBurn(
    amount: PromiseOrValue<BigNumberish>,
    mintRecipient: PromiseOrValue<BytesLike>,
    burnToken: PromiseOrValue<string>,
    metadata: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  rawDepositForBurnWithCaller(
    amount: PromiseOrValue<BigNumberish>,
    mintRecipient: PromiseOrValue<BytesLike>,
    burnToken: PromiseOrValue<string>,
    destinationCaller: PromiseOrValue<BytesLike>,
    metadata: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  tokenMessenger(overrides?: CallOverrides): Promise<string>

  callStatic: {
    depositForBurn(
      channel: PromiseOrValue<BigNumberish>,
      destinationBech32Prefix: PromiseOrValue<BytesLike>,
      destinationRecipient: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      mintRecipient: PromiseOrValue<BytesLike>,
      burnToken: PromiseOrValue<string>,
      memo: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    depositForBurnWithCaller(
      channel: PromiseOrValue<BigNumberish>,
      destinationBech32Prefix: PromiseOrValue<BytesLike>,
      destinationRecipient: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      mintRecipient: PromiseOrValue<BytesLike>,
      burnToken: PromiseOrValue<string>,
      destinationCaller: PromiseOrValue<BytesLike>,
      memo: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    domainNumber(overrides?: CallOverrides): Promise<number>

    domainRecipient(overrides?: CallOverrides): Promise<string>

    messageTransmitter(overrides?: CallOverrides): Promise<string>

    rawDepositForBurn(
      amount: PromiseOrValue<BigNumberish>,
      mintRecipient: PromiseOrValue<BytesLike>,
      burnToken: PromiseOrValue<string>,
      metadata: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    rawDepositForBurnWithCaller(
      amount: PromiseOrValue<BigNumberish>,
      mintRecipient: PromiseOrValue<BytesLike>,
      burnToken: PromiseOrValue<string>,
      destinationCaller: PromiseOrValue<BytesLike>,
      metadata: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    tokenMessenger(overrides?: CallOverrides): Promise<string>
  }

  filters: {
    'DepositForBurnMetadata(uint64,uint64,bytes)'(
      nonce?: PromiseOrValue<BigNumberish> | null,
      metadataNonce?: PromiseOrValue<BigNumberish> | null,
      metadata?: null
    ): DepositForBurnMetadataEventFilter
    DepositForBurnMetadata(
      nonce?: PromiseOrValue<BigNumberish> | null,
      metadataNonce?: PromiseOrValue<BigNumberish> | null,
      metadata?: null
    ): DepositForBurnMetadataEventFilter
  }

  estimateGas: {
    depositForBurn(
      channel: PromiseOrValue<BigNumberish>,
      destinationBech32Prefix: PromiseOrValue<BytesLike>,
      destinationRecipient: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      mintRecipient: PromiseOrValue<BytesLike>,
      burnToken: PromiseOrValue<string>,
      memo: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    depositForBurnWithCaller(
      channel: PromiseOrValue<BigNumberish>,
      destinationBech32Prefix: PromiseOrValue<BytesLike>,
      destinationRecipient: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      mintRecipient: PromiseOrValue<BytesLike>,
      burnToken: PromiseOrValue<string>,
      destinationCaller: PromiseOrValue<BytesLike>,
      memo: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    domainNumber(overrides?: CallOverrides): Promise<BigNumber>

    domainRecipient(overrides?: CallOverrides): Promise<BigNumber>

    messageTransmitter(overrides?: CallOverrides): Promise<BigNumber>

    rawDepositForBurn(
      amount: PromiseOrValue<BigNumberish>,
      mintRecipient: PromiseOrValue<BytesLike>,
      burnToken: PromiseOrValue<string>,
      metadata: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    rawDepositForBurnWithCaller(
      amount: PromiseOrValue<BigNumberish>,
      mintRecipient: PromiseOrValue<BytesLike>,
      burnToken: PromiseOrValue<string>,
      destinationCaller: PromiseOrValue<BytesLike>,
      metadata: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    tokenMessenger(overrides?: CallOverrides): Promise<BigNumber>
  }

  populateTransaction: {
    depositForBurn(
      channel: PromiseOrValue<BigNumberish>,
      destinationBech32Prefix: PromiseOrValue<BytesLike>,
      destinationRecipient: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      mintRecipient: PromiseOrValue<BytesLike>,
      burnToken: PromiseOrValue<string>,
      memo: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    depositForBurnWithCaller(
      channel: PromiseOrValue<BigNumberish>,
      destinationBech32Prefix: PromiseOrValue<BytesLike>,
      destinationRecipient: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      mintRecipient: PromiseOrValue<BytesLike>,
      burnToken: PromiseOrValue<string>,
      destinationCaller: PromiseOrValue<BytesLike>,
      memo: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    domainNumber(overrides?: CallOverrides): Promise<PopulatedTransaction>

    domainRecipient(overrides?: CallOverrides): Promise<PopulatedTransaction>

    messageTransmitter(overrides?: CallOverrides): Promise<PopulatedTransaction>

    rawDepositForBurn(
      amount: PromiseOrValue<BigNumberish>,
      mintRecipient: PromiseOrValue<BytesLike>,
      burnToken: PromiseOrValue<string>,
      metadata: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    rawDepositForBurnWithCaller(
      amount: PromiseOrValue<BigNumberish>,
      mintRecipient: PromiseOrValue<BytesLike>,
      burnToken: PromiseOrValue<string>,
      destinationCaller: PromiseOrValue<BytesLike>,
      metadata: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    tokenMessenger(overrides?: CallOverrides): Promise<PopulatedTransaction>
  }
}
